<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- CSS 폴더 등록 -->
	<!-- mapping="context경로/css/**"      location="webapp(root위치)/css/" -->
	<resources mapping="/css/**" location="/css/" />
	<!-- 이미지 폴더 등록 /img/**라고 오는 모든 요청에 대해서 -->
	<resources mapping="/img/**" location="/img/" />
	<!-- uploadFile/memberPhoto 폴더의 이미지 폴더로 등록 -->
	<resources mapping="/uploadFile/**" location="/uploadFile/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 파일업로드 처리를 위한 multipartResolver bean 등록 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding">
			<beans:value>utf-8</beans:value>
		</beans:property>
	</beans:bean>
	
	<context:component-scan base-package="com.bitcamp.op" />
	
	<!-- 데이터 베이스 연동을 위한 DataSource등록 : jdbc Template에 주입, Mybatis 설정-->
<!-- 	<beans:bean
		id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		드라이버 지정
		<beans:property name="driverClass" value="oracle.jdbc.driver.OracleDriver"/>
		오라클의경로	
		<beans:property name="jdbcUrl"
			value="jdbc:oracle:thin:@localhost:1522:orcl"/>
		<beans:property name="user" value="scott"/>
		<beans:property name="password" value="tiger"/>		
	</beans:bean> -->
	
	
	<!-- AWS Mysql  -->
	<beans:bean
		id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 드라이버 지정 -->
		<beans:property name="driverClass" value="com.mysql.jdbc.Driver"/>
		<!-- AWS Mysql 경로	-->	
		<beans:property name="jdbcUrl"
			value="jdbc:mysql://opendbmysql.crsv1mozx8ol.ap-northeast-2.rds.amazonaws.com:3306/openproject"/>
		<beans:property name="user" value="admin"/>
		<beans:property name="password" value="admin1234"/>		
	</beans:bean>
	
	
	
	<!-- mybatis 연동 설정 -->
	<beans:bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- dataSource 주입 받기 -->
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="mapperLocations" 
			value="classpath:com/bitcamp/op/mapper/mybatis/*.xml" 
		/>
	</beans:bean>
	
	<!-- SessionTemplate 클래스 등록 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory" />
	</beans:bean>
	
	
	
	<!-- jdbcTemplate  빈 등록 : DAO에 주입 -->
	<beans:bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource">
		<!-- 데이터 소스 레퍼런스로 등록 p태그로 써도 됨-->
		<!-- <beans:property name="dataSource" ref ="dataSource"/> -->
		
	</beans:bean>
	
	<!-- PlatformTransactionManager 빈 설정 --> 
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean> 
	<!-- @Transactional 애노테이션 활성화 설정 --> 
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	
	<!-- memberDao  빈 등록 -->
	<beans:bean id="memberDao" class="com.bitcamp.op.member.dao.MemberDao"/>
	
	
	<!-- JdbcTemplateMemberDao 빈 등록 -->
	<beans:bean id = "jdbcTemplateMemberDao" class="com.bitcamp.op.member.dao.JdbcTemplateMemberDao"/>
	
	<!-- 로그인서비스 빈 등록 -->
	<beans:bean id="memberLoginService" class="com.bitcamp.op.member.service.MemberLoginService"/>
	
	<!-- 로그인서비스 빈 등록 -->
	<beans:bean id="memberRegService" class="com.bitcamp.op.member.service.MemberRegService"/>
	
	<!-- 아이디 중복 체크 빈 등록 -->
	<beans:bean id="memberIdChk" class="com.bitcamp.op.member.service.MemberIdChkService"/>
	
	<!-- 멤버 리스트 빈 등록 -->
	<beans:bean id="memberList" class="com.bitcamp.op.member.service.MemberListService"/>
	
	<!-- mybatisMemberDao 빈 등록 -->
	<beans:bean id="mybatisMemberDao" class="com.bitcamp.op.member.dao.MyBatisMemberDao"/>
	
	
	
	<!-- 로그인 체크를 위한 인터셉터 등록 -->
	<interceptors>
		<interceptor>
				<mapping path="/member/**"/>
				<!-- member/*에 들어오는ㅇ ㅐ들 중에 /member/login/*는 제외한다 -->
				<exclude-mapping path="/member/login"/>
				<exclude-mapping path="/member/memberReg"/>
				<beans:bean class="com.bitcamp.op.member.interceptor.AuthCheckInterceptor" />
		</interceptor>
	</interceptors>
	
	
	
	
	
	
</beans:beans>
